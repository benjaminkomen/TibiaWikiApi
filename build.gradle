buildscript {
    ext {
        springBootVersion = '2.3.2.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "3.0"
}

apply plugin: 'org.springframework.boot'

group = 'com.tibiawiki'
version = '1.9.0'
description = 'TibiaWikiApi'
sourceCompatibility = '14'
targetCompatibility = '14'

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = 'https://maven.pkg.github.com/benjaminkomen/jwiki'
        credentials {
            username = 'benjaminkomen'
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

ext {
    slf4jVersion = '1.7.30'
    junitVersion = '5.6.2'
    lombokVersion = '1.18.12'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "benjaminkomen:jwiki:2.2.0"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    implementation "org.json:json:20200518"
    implementation "com.google.guava:guava:29.0-jre"
    implementation "io.vavr:vavr:0.10.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.mockito:mockito-core:3.4.6"
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation "io.swagger.core.v3:swagger-annotations:2.1.3"
    implementation "org.springdoc:springdoc-openapi-ui:1.4.3"
}

sonarqube {
    properties {
        property "sonar.projectName", "TibiaWikiApi"
        property "sonar.projectKey", "com.tibiawiki:TibiaWikiApi"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "./build/reports/jacocoTestReport.xml"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += '--enable-preview'
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

jar {
    manifest {
        attributes 'Main-Class': 'com/tibiawiki/TibiaWikiApiApplication'
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom testImplementation
}

springBoot {
    buildInfo()
}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [configurations.integrationTestCompile]
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

check.dependsOn integrationTest

jacocoTestReport {
    dependsOn check

    reports {
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacocoTestReport.xml")
    }
}